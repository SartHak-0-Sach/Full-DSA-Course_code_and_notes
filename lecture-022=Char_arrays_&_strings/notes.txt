https://stackoverflow.com/questions/40716515/do-stdstrings-end-in-0-when-initialized-with-a-string-literal

https://cplusplus.com/reference/string/string/

In this lecture we are going to be studying about char arrays, strings and solved relevant questions to the topics.

We started off by learning what char arrays, strings are and why are they useful.

In C++, strings are typically terminated by a null character, denoted by '\0', indicating the end of the string within the memory allocated to it. This null character holds an ASCII value of 0. Adding a null character at any point in the string instructs the compiler to cease looking further ahead, effectively reducing the size of the string.

Furthermore, string literals serve as a convenient means to represent strings within the allocated memory. They are enclosed within double quotes (" "). When using string literals, the compiler initializes a string with the specified text.

In C++, there are various methods to initialize strings. One such method involves utilizing string literals. These literals, enclosed within double quotes, allow for concise initialization of strings with predetermined text.

If you declare a string or char array of size 10 and fill all 9 characters in it but add a null character ('\0') at the 5th index, the string will effectively be terminated at the 5th index.

Before adding the null character, if you check the length of the string (assuming you're using a std::string object), it will return the number of characters inserted into the string. In this case, it will return 9.

After adding the null character at the 5th index, the length of the string (if you check using std::string::length()) will be 5, as it counts the characters until it reaches the null terminator.

As for accessing characters beyond the 5th index, they won't be accessible directly via the string object or array indexing because the null character signifies the end of the string. However, the memory locations are still accessible, so you can technically access them directly through pointers or array indexing. But it's important to note that these characters are not part of the string itself and are not reliable or meaningful as part of the string content.

The execution of taking input from user is stopped by the cin command whenever it encounters a space, tab, or new line command/character.

So to take input of strings involving any of the above mentioned characters we use getline() function in C++ which is a member function(Member functions are operators and functions that are declared as members of a class. Member functions do not include operators and functions declared with the friend specifier. These are called friends of a class. You can declare a member function as static ; this is called a static member function).

std::string stores its data internally in the form of a null-terminated C string, but in normal usage it does not allow you to access the null terminator, more info about this can be read from the stack-overflow link added at the top of this notes file.

String vs. Character Array:
Data Type:

String: string is a class in C++ Standard Library (STL) used to represent a sequence of characters.
Character Array: A character array (char[]) is a contiguous sequence of characters stored in memory.
Termination:

String: string objects are terminated by a null character ('\0'), and the STL handles this termination internally.
Character Array: In character arrays, the null character must be explicitly added to mark the end of the string.
Mutability:

String: string objects are mutable. You can modify the contents of a string using various member functions.
Character Array: Character arrays are mutable too. You can directly modify individual characters in the array.
Length:

String: The length of a string can be obtained using the length() or size() member functions.
Character Array: To get the length of a character array, you need to iterate through the array until you encounter the null character.
Size:

String: string objects dynamically adjust their memory allocation as needed. Their size can grow or shrink dynamically.
Character Array: The size of a character array is fixed and needs to be explicitly allocated.
Library Functions:

String: Strings offer a wide range of member functions for various operations like concatenation, comparison, substring extraction, etc.
Character Array: You often need to use library functions like strcpy(), strcat(), strcmp(), etc., for operations on character arrays.
Standard Library Support:

String: string is a part of the C++ Standard Library (<string> header).
Character Array: Character arrays are part of the core language and do not require any additional library inclusion.
Other Related Concepts:
C-Style Strings:

C-style strings are character arrays terminated by a null character.
They are commonly used in C programming and are compatible with many C++ functions.
Dynamic Memory Allocation:

Character arrays often require manual memory management using functions like malloc() and free() for dynamic memory allocation.
string objects handle memory management automatically.
Null Termination:

Null termination is crucial for character arrays to ensure proper string termination and prevent buffer overflows.
string objects manage null termination internally, abstracting it away from the user.
Unicode Support:

string objects provide better support for Unicode characters and multibyte characters compared to character arrays.
Performance:

string operations are generally safer and more convenient but may have a slight performance overhead compared to character arrays.
Standard Template Library (STL):

string is a part of the Standard Template Library (STL) and integrates well with other STL containers and algorithms.
Character arrays lack the rich functionality and interoperability provided by STL containers.
In summary, string objects offer safer, more convenient, and feature-rich string manipulation compared to character arrays. However, character arrays provide lower-level control and compatibility with legacy codebases and C-style functions. The choice between them depends on the specific requirements of your application.

