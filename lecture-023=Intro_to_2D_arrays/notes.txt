https://stackoverflow.com/questions/12813494/why-do-we-need-to-specify-the-column-size-when-passing-a-2d-array-as-a-parameter

In this lecture we are going to be discussing about 2D arrays.

Firstly we started with an introduction, what 2D arrays are and why do we need them.

Then we understood how 2D arrays are stored in memory and how we can convert 2D visualization into a linear array according to our convinience.

While it's true that you can flatten a 2D array into a linear array using a mathematical formula, using 2D arrays directly provides several advantages:

Ease of understanding: 2D arrays provide a more intuitive representation of data that has a natural two-dimensional structure, such as grids, tables, matrices, images, etc. This makes the code more readable and easier to understand, especially for others who may be working on the same codebase.

Accessing elements: With a 2D array, accessing elements is straightforward using row and column indices, which makes the code cleaner and easier to maintain compared to manually computing the index in a linear array.

Performance: Accessing elements in a 2D array is typically more efficient than computing the index in a linear array, especially for large arrays, because the index calculation overhead is eliminated.

Flexibility: 2D arrays allow for easy resizing along both dimensions, enabling dynamic changes to the size of the data structure.

Standardization: Many programming languages provide built-in support for 2D arrays, making them a standard tool for representing and manipulating two-dimensional data.

While flattening a 2D array into a linear array can be useful in certain situations, such as when interfacing with libraries or APIs that expect data in a linear format, using 2D arrays directly is often preferable for its simplicity, readability, and performance benefits.

Multidimensional arrays, including 2D arrays and beyond, are fundamental data structures used in programming to organize data in multiple dimensions. Let's delve into them in detail:

1. Two-Dimensional (2D) Arrays:
Definition: A 2D array is a data structure that stores elements in a grid format with rows and columns.
Representation: In memory, a 2D array is typically represented as a contiguous block of memory where elements are stored row by row or column by column.
Initialization: 2D arrays are usually initialized with specific values or can be populated dynamically.
Accessing Elements: Elements in a 2D array are accessed using two indices: one for the row and one for the column.
Common Use Cases: Matrices, tables, game boards, images, etc.
Example: In Python, a 2D array can be represented using nested lists or using libraries like NumPy.
python
Copy code
# Example of a 2D array in Python using nested lists
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]

# Accessing an element
print(matrix[1][2])  # Output: 6
2. Multidimensional Arrays:
Definition: A multidimensional array is a data structure that extends beyond two dimensions, organizing data in three or more dimensions.
Representation: Multidimensional arrays are stored in memory similarly to 2D arrays, with contiguous blocks of memory, but with additional dimensions.
Initialization: Like 2D arrays, multidimensional arrays can be initialized with specific values or populated dynamically.
Accessing Elements: Accessing elements in multidimensional arrays requires specifying indices for each dimension.
Common Use Cases: Voxel data in 3D graphics, hypercubes in mathematics, tensors in machine learning, etc.
Example: A 3D array can be visualized as a cube or a collection of 2D arrays stacked together.
python
Copy code
# Example of a 3D array in Python using nested lists
cube = [
    [[1, 2], [3, 4]],
    [[5, 6], [7, 8]],
    [[9, 10], [11, 12]]
]

# Accessing an element
print(cube[1][0][1])  # Output: 6
Benefits:
Organizing Complex Data: Multidimensional arrays allow for the organization of complex data structures, facilitating easier manipulation and analysis.

Efficient Access: Accessing elements in multidimensional arrays is efficient and straightforward using multiple indices.

Support for Multidimensional Data: Many real-world problems involve data that can be naturally represented in more than two dimensions, and multidimensional arrays provide a suitable data structure for such cases.

Challenges:
Increased Complexity: As the dimensionality increases, the complexity of understanding and managing the array also increases.

Memory Usage: Multidimensional arrays can consume significant memory, especially for large dimensions or when storing large elements.

In summary, multidimensional arrays are essential data structures for organizing and manipulating data in multiple dimensions, offering benefits such as efficient access and support for complex data structures. However, they also pose challenges related to complexity and memory usage, which should be considered when designing algorithms and data structures.







22:44






Let's explore various methods for searching in a 2D array and related concepts:

Methods for Searching in a 2D Array:
Linear Search:

Description: Involves iterating through each element of the 2D array and comparing it with the target value.
Implementation: Use nested loops to traverse rows and columns, checking each element for equality with the target value.
Time Complexity: O(m * n), where m and n are the dimensions of the 2D array.
Binary Search (Row-wise or Column-wise):

Description: Applies binary search algorithm along rows or columns of a sorted 2D array to find the target value.
Implementation: For row-wise binary search, perform binary search on each row individually. For column-wise binary search, perform binary search on each column individually.
Time Complexity: O(m * log n) for row-wise binary search, O(n * log m) for column-wise binary search, where m and n are the dimensions of the 2D array.
Optimized Linear Search (Sorted 2D Array):

Description: Utilizes the sorted nature of the 2D array to optimize linear search by starting from either top-right or bottom-left corner.
Implementation: Compare the target value with the element at the current position and move left or down (for top-right corner) or right or up (for bottom-left corner) based on the comparison until the target is found or boundaries are exceeded.
Time Complexity: O(m + n), where m and n are the dimensions of the 2D array.
Depth-First Search (DFS) or Breadth-First Search (BFS):

Description: Treats the 2D array as a graph and performs depth-first or breadth-first traversal to search for the target value.
Implementation: Start traversal from a specific cell and recursively explore adjacent cells until the target is found or all cells are visited.
Time Complexity: O(m * n) in the worst case for both DFS and BFS.
Related Concepts:
Matrix Search Problems:

Various algorithmic problems involve searching in a 2D matrix with specific properties or constraints, such as searching in a sorted matrix, searching in a rotated matrix, or searching in a matrix with specific patterns.
Optimization Techniques:

Binary search and optimized linear search are common techniques used to improve search efficiency, especially in large or sorted 2D arrays.
Understanding the properties of the 2D array, such as sortedness or specific patterns, can lead to more efficient search algorithms.
Search Space Reduction:

In some scenarios, it's possible to reduce the search space by applying pruning techniques or exploiting specific properties of the 2D array.
For example, in binary search, eliminating rows or columns based on target comparisons can significantly reduce the search space.
Graph Search Algorithms:

DFS and BFS, commonly used for graph traversal, can be adapted for searching in 2D arrays by treating array elements as graph nodes and exploring adjacent elements.
These algorithms are particularly useful for searching paths or patterns in 2D grids.
Space-Time Tradeoffs:

Different search algorithms offer different tradeoffs between time complexity and space complexity.
It's essential to choose the appropriate search algorithm based on the problem constraints, input size, and available resources.
In summary, searching in a 2D array involves various techniques and algorithms, each with its advantages and tradeoffs. By understanding these methods and related concepts, developers can efficiently search for specific elements or patterns in 2D arrays and solve a wide range of algorithmic problems effectively.

Why do we need to specify the column size, when passsing a 2D array as a parameter, while the row part can be left empty?
Answer is- When passing a 2D array as a parameter in C or C++, specifying the column size is necessary for the compiler to correctly interpret the array. The reason for this is rooted in the fact that arrays in C and C++ are stored in contiguous memory locations, with each row occupying consecutive memory slots. Without the column size specified, the compiler wouldn't know the size of each row, making it impossible to calculate the memory offset to access elements efficiently.

Consider the following reasons why we need to specify the column size when passing a 2D array as a parameter:

Memory Layout:

In memory, a 2D array is represented as a contiguous block of memory where each row follows the previous one. Knowing the number of columns is crucial for calculating the memory offset to access elements within each row.
Pointer Arithmetic:

In C and C++, accessing elements of a 2D array involves pointer arithmetic. When you pass a 2D array to a function, it's converted into a pointer to its first element.
Specifying the column size allows the compiler to calculate the correct memory offsets when dereferencing the pointer to access elements.
Parameter Passing:

When passing a 2D array to a function, only the base address of the array (address of the first element) is passed. The compiler needs additional information about the dimensions of the array to interpret the elements correctly.
Compile-Time Safety:

Specifying the column size provides compile-time safety by ensuring that the function receives a properly sized 2D array. It helps prevent accidental buffer overflows and access violations.
However, in certain cases, especially when dealing with dynamically allocated 2D arrays or when using array pointers, it's possible to omit the column size and use dynamic memory allocation or explicit pointer manipulation to access elements. Nevertheless, when working with static 2D arrays, specifying the column size is necessary for proper interpretation and efficient memory access.

In C and C++, when passing a 2D array as a parameter to a function, you need to specify the column size, but you can leave the row part empty. This is because C and C++ use row-major order for storing multi-dimensional arrays in memory, which means that elements of each row are contiguous in memory.

Here's why you need to specify the column size:

Memory Contiguity: In a 2D array, the elements of each row are stored contiguously in memory. Knowing the column size allows the compiler to calculate the memory offsets correctly when accessing elements of the array.

Pointer Arithmetic: When you pass a 2D array to a function, it decays into a pointer to its first element. If you specify the column size, the compiler knows how many elements are there in each row, and thus, it can correctly perform pointer arithmetic to access elements.

Compile-Time Checking: Specifying the column size allows the compiler to perform compile-time type checking. If the function signature expects a specific column size and you pass an array with a different column size, the compiler will issue a warning or error, helping catch potential bugs early.

However, you can leave the row part empty because the compiler can deduce the number of rows from the size of the array passed. For example:

cpp
Copy code
void func(int arr[][3]) {
    // Function definition
}

int main() {
    int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};
    func(arr); // Passing a 2D array to func
    return 0;
}
In this example, func expects a 2D array where each row has 3 columns. The compiler can deduce the number of rows from the size of arr, which is 2. Therefore, you don't need to specify the row size explicitly in the function parameter. However, you still need to specify the column size for the reasons mentioned above.

Let's dive into the intricacies of 2D arrays, including passing them as function parameters and related concepts:

2D Arrays in C++:
Definition:

A 2D array, also known as a matrix, is a collection of elements arranged in rows and columns.
In C++, a 2D array is implemented as an array of arrays, where each row is an array and all rows together form the 2D array.
Declaration and Initialization:

2D arrays are declared using square brackets to specify the dimensions.
Example: int arr[3][4]; declares a 2D array with 3 rows and 4 columns.
Initialization can be done during declaration or later using nested loops or list initialization.
Memory Representation:

2D arrays are stored in memory in a contiguous block, with elements of each row stored together.
Rows are stored one after the other, making row-wise traversal efficient.
Accessing Elements:

Elements of a 2D array are accessed using row and column indices.
Example: arr[i][j] accesses the element at the i-th row and j-th column.
Passing 2D Arrays to Functions:

When passing a 2D array to a function, you need to specify at least the column size.
The row size can be left empty, and the compiler deduces it from the size of the array passed.
Example: void func(int arr[][4]) expects a 2D array with 4 columns, and the row size is deduced from the array passed.
Dynamic Allocation:

2D arrays can be dynamically allocated using pointers.
Memory is allocated for rows and columns separately, and pointers are used to access elements.
Example: int** arr = new int*[rows]; followed by allocating memory for each row.
Related Concepts:

Row-Major Order: C++ uses row-major order for storing 2D arrays in memory, where elements of each row are stored together.

Column-Major Order: Some programming languages use column-major order, where elements of each column are stored together.

Pointer Arithmetic: Pointer arithmetic can be used to access elements of a 2D array by treating it as a 1D array.

Array of Pointers vs. Pointer to Array: 2D arrays can be implemented as arrays of pointers to rows or as a single pointer pointing to a contiguous block of memory.

Matrix Operations: Various operations can be performed on 2D arrays, such as addition, subtraction, multiplication, and transposition.

Matrix Search: Searching for elements, patterns, or specific properties within a 2D array is a common problem in algorithmic programming.

Optimizations and Considerations:

When working with large 2D arrays, consider optimizations such as cache-friendly algorithms, parallel processing, and memory management to improve performance.

Be mindful of memory usage, especially when dynamically allocating memory for large arrays, to avoid memory leaks and fragmentation.

Understanding these concepts is crucial for effectively working with 2D arrays in C++ and solving problems efficiently in various domains such as algorithmic programming, numerical computing, and image processing.

The biggest application of 2D arrays is in solving dp questions where 2D arrays help us by better visualization and accessing data at specific indexes.

Introduction to C / C++ Programming
Arrays
Overview
An array is a collection of data items, all of the same type, accessed using a common name.
A one-dimensional array is like a list;  A two dimensional array is like a table;  The C/C++ language places no limits on the number of dimensions in an array, though specific implementations may.
Some texts refer to one-dimensional arrays as vectors, two-dimensional arrays as matrices, and use the general term arrays when the number of dimensions is unspecified or unimportant.
Declaring Arrays
Array variables are declared identically to variables of their data type, except that the variable name is followed by one pair of square [ ] brackets for each dimension of the array.
Uninitialized arrays must have the dimensions of their rows, columns, etc. listed within the square brackets.
Dimensions used when declaring arrays in C must be positive integral constants or constant expressions.
In C++, dimensions must still be positive integers, but variables can be used, so long as the variable has a positive value at the time the array is declared.

C/C++ Examples:
        int i, j, intArray[ 10 ], number;
        float floatArray[ 1000 ];
        int tableArray[ 3 ][ 5 ];      /* 3 rows by 5 columns */
        
        const int NROWS = 100;      // ( Old code would use #define NROWS 100 )
        const int NCOLS = 200;      // ( Old code would use #define NCOLS 200 )
        float matrix[ NROWS ][ NCOLS ];
C++ Only Example:
        int numElements;
        cout << "How big an array do you want? ";
        cin >> numElements;
        if( numElements <= 0 ) {
            cerr << "Error - Quitting\n";
            exit( 0 );
        }
        double data[ numElements ];    // This only works in C++, not in plain C
Initializing Arrays
Arrays may be initialized when they are declared, just as any other variables.
Place the initialization data in curly {} braces following the equals sign.  Note the use of commas in the examples below.
An array may be partially initialized, by providing fewer data items than the size of the array.  The remaining array elements will be automatically initialized to zero.
If an array is to be completely initialized, the dimension of the array is not required.  The compiler will automatically size the array to fit the initialized data.  ( Variation:  Multidimensional arrays - see below. )
Examples:
        int i =  5, intArray[ 6 ] = { 1, 2, 3, 4, 5, 6 }, k;
        float sum  = 0.0, floatArray[ 100 ] = { 1.0, 5.0, 20.0 };
        double  piFractions[ ] = { 3.141592654, 1.570796327, 0.785398163 };
Using Arrays
Elements of an array are accessed by specifying the index ( offset ) of the desired element within square [ ] brackets after the array name.
Array subscripts must be of integer type.  ( int, long int, char, etc. )
VERY IMPORTANT: Array indices start at zero in C, and go to one less than the size of the array.  For example, a five element array will have indices zero through four.  This is because the index in C is actually an offset from the beginning of the array.  ( The first element is at the beginning of the array, and hence has zero offset. )
Landmine:  The most common mistake when working with arrays in C is forgetting that indices start at zero and stop one less than the array size.
Arrays are commonly used in conjunction with loops, in order to perform the same calculations on all ( or some part ) of  the data items in the array.
Sample Programs Using 1-D Arrays
The first sample program uses loops and arrays to calculate the first twenty Fibonacci numbers.  Fibonacci numbers are used to determine the sample points used in certain optimization methods.
        /* Program to calculate the first 20 Fibonacci numbers. */
        
        #include <iostream> 
        using namespace std;
        
        int main( void ) {
            
            int i, fibonacci[ 20 ];
            
            fibonacci[ 0 ] = 0;
            fibonacci[ 1 ] = 1;
            
            for( i = 2; i < 20; i++ )
                fibonacci[ i ] = fibonacci[ i - 2 ] + fibonacci[ i - 1 ];
                
            for( i = 0; i < 20; i++ )
                cout << "Fibonacci[ " << i << " ] = " <<  fibonacci[ i ] << endl;
            
        } /* End of sample program to calculate Fibonacci numbers */  
Exercise: What is the output of the following program:
        /* Sample Program Using Arrays */
        
        #include <iostream>
        using namespace std;
        
        int main( void ) {
        
            int numbers[ 10 ];
            int i, index = 2;
            
            for( i = 0; i < 10; i++ ) 
                numbers[ i ] = i * 10;
            
            numbers[ 8 ] = 25;
            numbers[ 5 ] = numbers[ 9 ] / 3;
            numbers[ 4 ] += numbers[ 2 ] / numbers[ 1 ];
            numbers[ index ] = 5;
            ++numbers[ index ];
            numbers[ numbers[ index++ ] ] = 100;
            numbers[ index ] = numbers[ numbers[ index + 1 ] / 7 ]--;
            
            for( index = 0; index < 10; index++ )
                cout << "numbers[ " << index << " ] = " << numbers[ index ] << endl;
            
        } /* End of second sample program */

  
Multidimensional Arrays
Multi-dimensional arrays are declared by providing more than one set of square [ ] brackets after the variable name in the declaration statement.
One dimensional arrays do not require the dimension to be given if the array is to be completely initialized.  By analogy, multi-dimensional arrays do not require the first dimension to be given if the array is to be completely initialized.  All dimensions after the first must be given in any case.
For two dimensional arrays, the first dimension is commonly considered to be the number of rows, and the second dimension the number of  columns.  We will use this convention when discussing two dimensional arrays.
Two dimensional arrays are considered by C/C++ to be an array of ( single dimensional arrays ).  For example, "int numbers[ 5 ][ 6 ]"  would refer to a single dimensional array of 5 elements, wherein each element is a single dimensional array of 6 integers.  By extension, "int numbers[ 12 ][ 5 ][ 6 ]" would refer to an array of twelve elements, each of which is a two dimensional array, and so on.
Another way of looking at this is that C stores two dimensional arrays by rows, with all elements of a row being stored together as a single unit.  Knowing this can sometimes lead to more efficient programs. 
Multidimensional arrays may be completely initialized by listing all data elements within a single pair of curly {} braces, as with single dimensional arrays.
It is better programming practice to enclose each row within a separate subset of curly {} braces, to make the program more readable.  This is required if any row other than the last is to be partially initialized.  When subsets of braces are used, the last item within braces is not followed by a comma, but the subsets are themselves separated by commas.
Multidimensional arrays may be partially initialized by not providing complete initialization data.  Individual rows of a multidimensional array may be partially initialized, provided that subset braces are used.
Individual data items in a multidimensional array are accessed by fully qualifying an array element.  Alternatively, a smaller dimensional array may be accessed by partially qualifying the array name.  For example, if  "data" has been declared as a three dimensional array of floats, then data[ 1 ][ 2 ][ 5 ] would refer to a float, data[ 1 ][ 2 ] would refer to a one-dimensional array of floats, and data[ 1 ] would refer to a two-dimensional array of floats.  The reasons for this and the incentive to do this relate to memory-management issues that are beyond the scope of these notes.
Sample Program Using 2-D Arrays
        /* Sample program Using 2-D Arrays */
        
        #include <iostream> 
        using namespace std;
        
        int main( void ) {
        
            /* Program to add two multidimensional arrays */
            /* Written May 1995 by George P. Burdell */
            
            int a[ 2 ][ 3 ] = { { 5, 6, 7 }, { 10, 20, 30 } };
            int b[ 2 ][ 3 ] = { { 1, 2, 3 }, {  3,  2,  1 } };
            int sum[ 2 ][ 3 ], row, column;
            
            /* First the addition */
            
            for( row = 0; row < 2; row++ )
                for( column = 0; column < 3; column++ )
                    sum[ row ][ column ] =  
                        a[ row ][ column ] + b[ row ][ column ];
            
            /* Then print the results */
            
            cout <<  "The sum is: \n\n" ;
            
            for( row = 0; row < 2; row++ ) {
                for( column = 0; column < 3; column++ )
                    cout << "\t" <<  sum[ row ][ column ];
                cout << endl;   /* at end of each row */
            }
            
            return 0;
        }
Exercises
See Attached
Passing Arrays to Functions
Recall that we know two methods for passing ordinary data to functions:
Pass-by-Value, in which the function receives a copy and all changes are local, and
Pass-by-Reference, in which the names of the variables in the called and calling functions become aliases, and changes made in the called function DO affect the variables in the calling function.
If an individual element of an array is passed to a function, it is passed according to its underlying data type.
So if nums was declared as a one-dimensional array of ints, then passing nums[ i ] to a function would behave the exact way as passing any other int - Either pass-by-value or pass-by-reference, depending on how the function is written.
When an entire array is passed to a function, however, it is always passed by reference.
( It is actually passed by pointer/address, which is not covered here, but functionally it is pass-by-reference. )
The net result, is that when an entire array is passed to a function, and the function changes variables stored in that array, it does affect the data in the calling function's array.
Because arrays are passed by reference, there is generally no need for a function to "return" an array. - It merely needs to fill in an array provided by the calling function. ( It is possible for functions to return arrays but it requires the use of pointers and addresses, and frequently dynamic memory allocation, all of which is beyond the scope of this course. )
In order to prevent the function from changing the array values, the array parameter can be modified with the keyword const.
When an entire array is passed to a function, the size of the array is usually passed as an additional argument.
For a one dimensional array, the function's formal parameter list does not need to specify the dimension of the array.  If such a dimension is provided, the compiler will ignore it.
For a multi-dimensional array, all dimensions except the first must be provided in a functions formal parameter list.  The first dimension is optional, and will be ignored by the compiler.
A partially qualified multi-dimensional array may be passed to a function, and will be treated as an array of lower dimension.  For example, a single row of a two dimensional array may be passed to a function which is expecting a one dimensional array.  ( Question:  Why is it possible to pass a row this way, but not a column? )
Examples:  Note the use of arrays and functions in the following sample program.  Note that in the calculation of max4, we have passed a two dimensional array containing two rows of three elements as if it were a single dimensional array of six elements.  This is cheating, but it happens to work because of the way that the rows of a multidimensional array are stored.
        /* Program Illustrating the use of Arrays and Functions */
        
        #include <iostream>
        using namespace std;
        
        // Finds max in the array
        float maxArray( const float numbers[ ], int arraySize, int & errorCode ); 
        
        int main( void ) {
        
            float array1[ ] = { 10.0, 20.0, 100.0, 0.001 };
            float array2[ 2 ][ 3 ] = { { 5.0, 10.0, 20.0 },
                                       { 8.0, 15.0, 42.0 } };
            
            int sizes[ 2 ] = { 4, 3 }, err1, err2, err3, err4, err5;
            float max1, max2, max3, max4, max5;
            
            max1 = maxArray( array1, 4, err1 );
            max2 = maxArray( array1, sizes[ 0 ], err2 );
            max3 = maxArray( array2[ 1 ], 3, err3 );
            max4 = maxArray( array2[ 0 ], 6, err4 );
            max5 = maxArray( array1, -4, err5 ); // Generates an error
            
            cout << "Maximums are " <<  max1 << ", " << max2 << ", " << max3 
                 << ", " << max4 << ", " << max5 <<  endl;

            cout << "( Error codes are " <<  err1 << ", " << err2 << ", " << err3 
                 << ", " << err4 << ", " << err5 << " )\n" ;      
      
            return 0;
            
        }
        
        float maxArray( const float numbers[ ], int arraySize, int & errorCode ) {
        
            /* Function to find the maximum in an array of floats
               Note the use of the keyword "const" to prevent changing array data */
            
            int i;
            float max;

            if( arraySize <= 0 ) {
                errorCode = -1;
                return 0.0;
            }
            
            errorCode = 0;
            
            max = numbers[ 0 ];
            
            for( i = 1; i < arraySize; i++ )
                max = ( numbers[ i ] > max ) ? numbers[ i ] : max;
                
            return max;
            
        }

NOTE: A one-dimensional array is like a list; A two dimensional array is like a table; The C/C++ language places no limits on the number of dimensions in an array, though specific implementations may. Although an array can have as many as 32 dimensions, it is rare to have more than three. When you add dimensions to an array, the total storage needed by the array increases considerably, so use multidimensional arrays with care.